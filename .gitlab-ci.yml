stages:
  - setup
  - build
  - deploy

variables:
  CI_REGISTRY_USER: $REGISTRY_USER
  CI_REGISTRY_PASSWORD: $REGISTERY_PASS
  CI_REGISTRY: zyadzarin
  BACKEND_IMAGE: $CI_REGISTRY/olympic2024-dashboard-backend:$CI_COMMIT_SHORT_SHA
  NGINX_IMAGE: $CI_REGISTRY/olympic2024-dashboard-nginx:$CI_COMMIT_SHORT_SHA
  TSFILE: "tailscale_1.28.0_amd64.tgz"
  VM_IP: 100.117.79.105

tailscale-setup:
  stage: setup
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y iptables wget
  script:
    - cd /usr/local/bin
    - wget https://pkgs.tailscale.com/stable/${TSFILE} -P /tmp
    - tar xzf /tmp/${TSFILE} --strip-components=1
    - rm /tmp/${TSFILE}
    - mkdir -p /var/run/tailscale
    - update-alternatives --set iptables /usr/sbin/iptables-legacy
    - tailscaled --state="mem:" &
    - tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname="gitlab-$(cat /etc/hostname)" --accept-routes
    - tailscale status
  only:
    - main

build:
  stage: build
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $BACKEND_IMAGE -f docker/backend/Dockerfile .
    - docker push $BACKEND_IMAGE
    - docker build -t $NGINX_IMAGE -f docker/nginx/Dockerfile .
    - docker push $NGINX_IMAGE
  only:
    - main

deploy:
  stage: deploy
  image: ubuntu:latest
  needs:
    - build
  before_script:
    - apt-get update -qq && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml odoo@$VM_IP:/path/to/project/
    - ssh odoo@$VM_IP "
        docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
        export BACKEND_IMAGE=$BACKEND_IMAGE &&
        export NGINX_IMAGE=$NGINX_IMAGE &&
        docker-compose pull &&
        docker-compose up -d
      "
  only:
    - main