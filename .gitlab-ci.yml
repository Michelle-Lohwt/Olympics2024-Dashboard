stages:
  - setup
  - build
  - deploy

variables:
    CI_REGISTRY_USER: $REGISTRY_USER
    CI_REGISTRY_PASSWORD: $REGISTERY_PASS
    CI_REGISTRY_IMAGE: zyadzarin/olympic2024-dashboard:tgp-1.0
    TSFILE: "tailscale_1.28.0_amd64.tgz"
    VM_IP: 100.117.79.105

tailscale-setup:
  stage: setup
  image: ubuntu:latest
  before_script:
    - apt-get update -qq && apt-get install -y iptables wget
  script:
    - cd /usr/local/bin
    - wget https://pkgs.tailscale.com/stable/${TSFILE} -P /tmp
    - tar xzf /tmp/${TSFILE} --strip-components=1
    - rm /tmp/${TSFILE}
    - mkdir -p /var/run/tailscale
    - update-alternatives --set iptables /usr/sbin/iptables-legacy
    - tailscaled --state="mem:" &
    - tailscale up --authkey=${TAILSCALE_AUTHKEY} --hostname="gitlab-$(cat /etc/hostname)" --accept-routes
    - tailscale status
  only:
    - main

build:
  stage: build
  ## Run on a gitlab-runner that is configured with docker-in-docker
  image: docker:20.10.16
  services:
    - docker:20.10.16-dind
  variables:
    DOCKER_TLS_CERTDIR: "/certs"
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD
  script:
    - docker build -t $CI_REGISTRY_IMAGE .
    - docker push $CI_REGISTRY_IMAGE
  only:
    - main

deploy:
  stage: deploy
  image: ubuntu:latest
  needs:
    - build
  before_script:
    - apt-get update -qq && apt-get install -y openssh-client
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - ssh-keyscan -H $VM_IP >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh odoo@$VM_IP "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY_IMAGE"
    - ssh odoo@$VM_IP "docker-compose pull && docker-compose up -d"
  only:
    - main